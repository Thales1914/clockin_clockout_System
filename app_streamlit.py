import streamlit as st
import pandas as pd
import json
import os
from datetime import datetime
import pytz
from streamlit_geolocation import streamlit_geolocation
from geopy.distance import geodesic
from streamlit_gsheets import GSheetsConnection

# --- Configura√ß√µes da P√°gina ---
st.set_page_config(
    page_title="Ponto Omega",
    page_icon="üîµ",
    layout="centered"
)

# --- CONFIGURA√á√ïES GLOBAIS ---
EMPRESA_NOME = "Omega Distribuidora"
EMPRESA_LOCALIZACAO = (-3.8210554, -38.5049637)
RAIO_PERMITIDO_METROS = 150
FUSO_HORARIO = pytz.timezone("America/Fortaleza")

# --- CONEX√ÉO COM A BASE DE DADOS (GOOGLE SHEETS) ---
try:
    conn = st.connection("gsheets", type=GSheetsConnection)
except Exception as e:
    st.error("N√£o foi poss√≠vel ligar √† planilha do Google Sheets. Verifique os 'Secrets' no Streamlit Cloud.")
    st.stop() # Interrompe a execu√ß√£o da app se a conex√£o falhar

# --- L√ìGICA DE NEG√ìCIO ---
@st.cache_data(ttl=60) # Adiciona cache para n√£o ler a planilha a cada intera√ß√£o
def carregar_registros():
    """Carrega todos os registos da planilha do Google Sheets."""
    try:
        df = conn.read(worksheet="Registros", usecols=list(range(6)), ttl="0")
        return df.dropna(how="all")
    except Exception as e:
        st.error(f"N√£o foi poss√≠vel ler a planilha: {e}")
        return pd.DataFrame()

def bater_ponto(funcionario_id, localizacao_gps, status_local):
    """Adiciona uma nova linha com o registo de ponto na planilha."""
    if not funcionario_id.strip():
        return "‚ö†Ô∏è Por favor, insira um ID de funcion√°rio.", "warning"

    agora = datetime.now(FUSO_HORARIO)
    
    local_str = "N/A"
    if localizacao_gps and 'latitude' in localizacao_gps and 'longitude' in localizacao_gps:
        local_str = f"Lat: {localizacao_gps['latitude']:.4f}, Lon: {localizacao_gps['longitude']:.4f}"

    df_registros = carregar_registros()
    df_funcionario_hoje = df_registros[
        (df_registros["Funcion√°rio"] == funcionario_id) & 
        (df_registros["Data"] == agora.strftime("%Y-%m-%d"))
    ]
    
    tipo_registro = 'Entrada'
    if not df_funcionario_hoje.empty and df_funcionario_hoje.iloc[-1]["Tipo"] == 'Entrada':
        tipo_registro = 'Sa√≠da'

    novo_registro = pd.DataFrame([{
        "Funcion√°rio": funcionario_id,
        "Data": agora.strftime("%Y-%m-%d"),
        "Hora": agora.strftime("%H:%M:%S"),
        "Tipo": tipo_registro,
        "Status Local": status_local,
        "Coordenadas": local_str
    }])
    
    try:
        # Cria uma c√≥pia para evitar o aviso 'SettingWithCopyWarning' do pandas
        df_atualizado = df_registros.copy().append(novo_registro, ignore_index=True)
        conn.update(worksheet="Registros", data=df_atualizado)
        # Limpa o cache para que o relat√≥rio seja atualizado na pr√≥xima recarga
        st.cache_data.clear()
        mensagem = f"Ponto de '{tipo_registro.upper()}' registado √†s {agora.strftime('%H:%M:%S')}."
        return mensagem, "success"
    except Exception as e:
        return f"‚ùå Erro ao guardar na planilha: {e}", "error"

# --- INTERFACE GR√ÅFICA ---
st.title(f"üîµ Ponto {EMPRESA_NOME}")
st.markdown("Insira o seu ID e clique no bot√£o para registar o seu ponto.")

id_funcionario = st.text_input("ID do Funcion√°rio", placeholder="O seu ID aqui...", label_visibility="collapsed")
localizacao_gps = streamlit_geolocation()

if st.button("Bater o Ponto", type="primary", use_container_width=True):
    if not id_funcionario:
        st.warning("√â necess√°rio inserir um ID de funcion√°rio.", icon="‚ö†Ô∏è")
    elif not localizacao_gps or 'latitude' not in localizacao_gps:
        st.error("N√£o foi poss√≠vel obter a sua localiza√ß√£o. Por favor, autorize o acesso no seu navegador e recarregue a p√°gina.", icon="üõ∞Ô∏è")
    else:
        with st.spinner("A verificar localiza√ß√£o e a registar..."):
            user_coords = (localizacao_gps['latitude'], localizacao_gps['longitude'])
            distancia = geodesic(EMPRESA_LOCALIZACAO, user_coords).meters
            
            st.info(f"Voc√™ est√° a {distancia:.0f} metros da {EMPRESA_NOME}.", icon="üìç")
            
            status_local = "Remoto"
            if distancia <= RAIO_PERMITIDO_METROS:
                status_local = "Presencial"
            
            mensagem, tipo_alerta = bater_ponto(id_funcionario.lower(), localizacao_gps, status_local)

            if status_local == "Presencial":
                st.success(f"Localiza√ß√£o validada: {status_local}", icon="‚úÖ")
            else:
                st.warning(f"Fora da √°rea da empresa: {status_local}", icon="üó∫Ô∏è")
            
            if tipo_alerta == "success":
                st.success(mensagem)
            else:
                st.error(mensagem)

# --- RELAT√ìRIO DE PONTOS ---
st.divider()
st.header("Relat√≥rio de Pontos")

if st.button("Recarregar Relat√≥rio"):
    st.cache_data.clear()

df_relatorio = carregar_registros()

if df_relatorio.empty:
    st.info("Ainda n√£o existem registos de ponto.")
else:
    df_relatorio_sorted = df_relatorio.sort_values(by=["Data", "Hora"], ascending=False)
    st.dataframe(df_relatorio_sorted, use_container_width=True, hide_index=True)

    csv = df_relatorio_sorted.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="Descarregar Relat√≥rio como CSV",
        data=csv,
        file_name="relatorio_ponto.csv",
        mime="text/csv",
    )
